name: Build_Push

on:
  push:
    branches: [ master ]

env:
  # Use docker.io for Docker Hub if empty
  IMAGE_REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_REPO: ${{ github.repository }}
  IMAGE_TAG: release
  FULL_IMAGE_NAME: ghcr.io/derblum/filmkritiken-backend:release
  FAIL_ON_SONAR: false

jobs:

  build_push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build and Test
        run: |
          DOCKER_BUILDKIT=1 docker build -o output -f Dockerfile_build .

      - name: Sonarqube Check
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.qualitygate.wait=${{ env.FAIL_ON_SONAR }}

      # Workaround: https://github.com/docker/build-push-action/issues/461
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@0648fd6fd6801dcae14b6299cc1b23187d3cb797

      # Login against a Docker registry
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.IMAGE_REGISTRY }}
        uses: docker/login-action@3da7dc6e2b31f99ef2cb9fb4c50fb0971e0d0139
        with:
          registry: ${{ env.IMAGE_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@6c3ca5dfa6895029f82e5b2f26f060bc0d3c6a2c
        with:
          images: ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_REPO }}
          tags: type=raw,value=${{ env.IMAGE_TAG }}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@37abcedcc1da61a57767b7588cb9d03eb57e28b3
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  check:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    needs:
      - build_push
    steps:

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.FULL_IMAGE_NAME }}'
          format: 'sarif'
          output: 'trivy-results.sarif'
        env:
          TRIVY_USERNAME: ${{ github.actor }}
          TRIVY_PASSWORD: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
