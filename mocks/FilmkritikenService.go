// Code generated by MockGen. DO NOT EDIT.
// Source: FilmkritikenService.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	filmkritiken "github.com/DerBlum/filmkritiken-backend/domain/filmkritiken"
	gomock "github.com/golang/mock/gomock"
)

// MockFilmkritikenService is a mock of FilmkritikenService interface.
type MockFilmkritikenService struct {
	ctrl     *gomock.Controller
	recorder *MockFilmkritikenServiceMockRecorder
}

// MockFilmkritikenServiceMockRecorder is the mock recorder for MockFilmkritikenService.
type MockFilmkritikenServiceMockRecorder struct {
	mock *MockFilmkritikenService
}

// NewMockFilmkritikenService creates a new mock instance.
func NewMockFilmkritikenService(ctrl *gomock.Controller) *MockFilmkritikenService {
	mock := &MockFilmkritikenService{ctrl: ctrl}
	mock.recorder = &MockFilmkritikenServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilmkritikenService) EXPECT() *MockFilmkritikenServiceMockRecorder {
	return m.recorder
}

// CreateFilm mocks base method.
func (m *MockFilmkritikenService) CreateFilm(ctx context.Context, film *filmkritiken.Film, filmkritikenDetails *filmkritiken.FilmkritikenDetails, imageBites *[]byte) (*filmkritiken.Filmkritiken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFilm", ctx, film, filmkritikenDetails, imageBites)
	ret0, _ := ret[0].(*filmkritiken.Filmkritiken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFilm indicates an expected call of CreateFilm.
func (mr *MockFilmkritikenServiceMockRecorder) CreateFilm(ctx, film, filmkritikenDetails, imageBites interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFilm", reflect.TypeOf((*MockFilmkritikenService)(nil).CreateFilm), ctx, film, filmkritikenDetails, imageBites)
}

// GetFilmkritiken mocks base method.
func (m *MockFilmkritikenService) GetFilmkritiken(ctx context.Context, filter *filmkritiken.FilmkritikenFilter) ([]*filmkritiken.Filmkritiken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilmkritiken", ctx, filter)
	ret0, _ := ret[0].([]*filmkritiken.Filmkritiken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilmkritiken indicates an expected call of GetFilmkritiken.
func (mr *MockFilmkritikenServiceMockRecorder) GetFilmkritiken(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilmkritiken", reflect.TypeOf((*MockFilmkritikenService)(nil).GetFilmkritiken), ctx, filter)
}

// LoadImage mocks base method.
func (m *MockFilmkritikenService) LoadImage(ctx context.Context, imageId string) (*[]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadImage", ctx, imageId)
	ret0, _ := ret[0].(*[]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadImage indicates an expected call of LoadImage.
func (mr *MockFilmkritikenServiceMockRecorder) LoadImage(ctx, imageId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadImage", reflect.TypeOf((*MockFilmkritikenService)(nil).LoadImage), ctx, imageId)
}

// OpenCloseBewertungen mocks base method.
func (m *MockFilmkritikenService) OpenCloseBewertungen(ctx context.Context, filmkritikenId string, offen bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenCloseBewertungen", ctx, filmkritikenId, offen)
	ret0, _ := ret[0].(error)
	return ret0
}

// OpenCloseBewertungen indicates an expected call of OpenCloseBewertungen.
func (mr *MockFilmkritikenServiceMockRecorder) OpenCloseBewertungen(ctx, filmkritikenId, offen interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenCloseBewertungen", reflect.TypeOf((*MockFilmkritikenService)(nil).OpenCloseBewertungen), ctx, filmkritikenId, offen)
}

// SetKritik mocks base method.
func (m *MockFilmkritikenService) SetKritik(ctx context.Context, filmkritikenId, von string, bewertung int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetKritik", ctx, filmkritikenId, von, bewertung)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetKritik indicates an expected call of SetKritik.
func (mr *MockFilmkritikenServiceMockRecorder) SetKritik(ctx, filmkritikenId, von, bewertung interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetKritik", reflect.TypeOf((*MockFilmkritikenService)(nil).SetKritik), ctx, filmkritikenId, von, bewertung)
}

// MockFilmkritikenRepository is a mock of FilmkritikenRepository interface.
type MockFilmkritikenRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFilmkritikenRepositoryMockRecorder
}

// MockFilmkritikenRepositoryMockRecorder is the mock recorder for MockFilmkritikenRepository.
type MockFilmkritikenRepositoryMockRecorder struct {
	mock *MockFilmkritikenRepository
}

// NewMockFilmkritikenRepository creates a new mock instance.
func NewMockFilmkritikenRepository(ctrl *gomock.Controller) *MockFilmkritikenRepository {
	mock := &MockFilmkritikenRepository{ctrl: ctrl}
	mock.recorder = &MockFilmkritikenRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilmkritikenRepository) EXPECT() *MockFilmkritikenRepositoryMockRecorder {
	return m.recorder
}

// FindFilmkritiken mocks base method.
func (m *MockFilmkritikenRepository) FindFilmkritiken(ctx context.Context, filmkritikenId string) (*filmkritiken.Filmkritiken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFilmkritiken", ctx, filmkritikenId)
	ret0, _ := ret[0].(*filmkritiken.Filmkritiken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFilmkritiken indicates an expected call of FindFilmkritiken.
func (mr *MockFilmkritikenRepositoryMockRecorder) FindFilmkritiken(ctx, filmkritikenId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFilmkritiken", reflect.TypeOf((*MockFilmkritikenRepository)(nil).FindFilmkritiken), ctx, filmkritikenId)
}

// GetFilmkritiken mocks base method.
func (m *MockFilmkritikenRepository) GetFilmkritiken(ctx context.Context, filter *filmkritiken.FilmkritikenFilter) ([]*filmkritiken.Filmkritiken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilmkritiken", ctx, filter)
	ret0, _ := ret[0].([]*filmkritiken.Filmkritiken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilmkritiken indicates an expected call of GetFilmkritiken.
func (mr *MockFilmkritikenRepositoryMockRecorder) GetFilmkritiken(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilmkritiken", reflect.TypeOf((*MockFilmkritikenRepository)(nil).GetFilmkritiken), ctx, filter)
}

// SaveFilmkritiken mocks base method.
func (m *MockFilmkritikenRepository) SaveFilmkritiken(ctx context.Context, filmkritiken *filmkritiken.Filmkritiken) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveFilmkritiken", ctx, filmkritiken)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveFilmkritiken indicates an expected call of SaveFilmkritiken.
func (mr *MockFilmkritikenRepositoryMockRecorder) SaveFilmkritiken(ctx, filmkritiken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveFilmkritiken", reflect.TypeOf((*MockFilmkritikenRepository)(nil).SaveFilmkritiken), ctx, filmkritiken)
}

// MockImageRepository is a mock of ImageRepository interface.
type MockImageRepository struct {
	ctrl     *gomock.Controller
	recorder *MockImageRepositoryMockRecorder
}

// MockImageRepositoryMockRecorder is the mock recorder for MockImageRepository.
type MockImageRepositoryMockRecorder struct {
	mock *MockImageRepository
}

// NewMockImageRepository creates a new mock instance.
func NewMockImageRepository(ctrl *gomock.Controller) *MockImageRepository {
	mock := &MockImageRepository{ctrl: ctrl}
	mock.recorder = &MockImageRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageRepository) EXPECT() *MockImageRepositoryMockRecorder {
	return m.recorder
}

// DeleteImage mocks base method.
func (m *MockImageRepository) DeleteImage(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteImage", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteImage indicates an expected call of DeleteImage.
func (mr *MockImageRepositoryMockRecorder) DeleteImage(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImage", reflect.TypeOf((*MockImageRepository)(nil).DeleteImage), ctx, id)
}

// FindImage mocks base method.
func (m *MockImageRepository) FindImage(ctx context.Context, imageId string) (*[]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindImage", ctx, imageId)
	ret0, _ := ret[0].(*[]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindImage indicates an expected call of FindImage.
func (mr *MockImageRepositoryMockRecorder) FindImage(ctx, imageId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindImage", reflect.TypeOf((*MockImageRepository)(nil).FindImage), ctx, imageId)
}

// SaveImage mocks base method.
func (m *MockImageRepository) SaveImage(ctx context.Context, imageBites *[]byte) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveImage", ctx, imageBites)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveImage indicates an expected call of SaveImage.
func (mr *MockImageRepositoryMockRecorder) SaveImage(ctx, imageBites interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveImage", reflect.TypeOf((*MockImageRepository)(nil).SaveImage), ctx, imageBites)
}
